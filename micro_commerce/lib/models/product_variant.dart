/// üé® ProductVariant - ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡∏™‡∏µ, ‡∏Ç‡∏ô‡∏≤‡∏î, ‡πÅ‡∏ö‡∏ö)
/// 
/// ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå:
/// ‚Ä¢ ‡∏™‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (Color variations)
/// ‚Ä¢ ‡∏Ç‡∏ô‡∏≤‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (Size variations)
/// ‚Ä¢ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô‡∏ï‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
/// ‚Ä¢ ‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
/// ‚Ä¢ ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å

class ProductVariant {
  final String id;
  final String productId;
  final String name; // ‡πÄ‡∏ä‡πà‡∏ô "‡∏™‡∏µ‡πÅ‡∏î‡∏á-‡∏Ç‡∏ô‡∏≤‡∏î M"
  final Map<String, String> attributes; // ‡πÄ‡∏ä‡πà‡∏ô {"color": "‡πÅ‡∏î‡∏á", "size": "M"}
  final double? priceAdjustment; // ‡∏õ‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡∏•‡∏±‡∏Å (+/-) ‡∏´‡∏£‡∏∑‡∏≠ null ‡∏ñ‡πâ‡∏≤‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏ó‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°
  final int stock; // ‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ô‡∏µ‡πâ
  final List<String> images; // ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
  final bool isAvailable; // ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  final DateTime createdAt;
  final DateTime updatedAt;

  ProductVariant({
    required this.id,
    required this.productId,
    required this.name,
    required this.attributes,
    this.priceAdjustment,
    required this.stock,
    this.images = const [],
    this.isAvailable = true,
    required this.createdAt,
    required this.updatedAt,
  });

  // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ô‡∏µ‡πâ
  double getFinalPrice(double basePrice) {
    if (priceAdjustment == null) return basePrice;
    return basePrice + priceAdjustment!;
  }

  // ‡πÅ‡∏õ‡∏•‡∏á attributes ‡πÄ‡∏õ‡πá‡∏ô string ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
  String get displayName {
    if (attributes.isEmpty) return name;
    
    final parts = <String>[];
    if (attributes.containsKey('color')) {
      parts.add('‡∏™‡∏µ${attributes['color']}');
    }
    if (attributes.containsKey('size')) {
      parts.add('‡∏Ç‡∏ô‡∏≤‡∏î ${attributes['size']}');
    }
    if (attributes.containsKey('style')) {
      parts.add('‡πÅ‡∏ö‡∏ö ${attributes['style']}');
    }
    
    return parts.isNotEmpty ? parts.join(' - ') : name;
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  bool get inStock => stock > 0;

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏ï‡πà‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  bool get isLowStock => stock > 0 && stock < 5;

  factory ProductVariant.fromMap(Map<String, dynamic> data) {
    return ProductVariant(
      id: data['id'] ?? '',
      productId: data['productId'] ?? '',
      name: data['name'] ?? '',
      attributes: Map<String, String>.from(data['attributes'] ?? {}),
      priceAdjustment: data['priceAdjustment']?.toDouble(),
      stock: data['stock'] ?? 0,
      images: List<String>.from(data['images'] ?? []),
      isAvailable: data['isAvailable'] ?? true,
      createdAt: data['createdAt']?.toDate() ?? DateTime.now(),
      updatedAt: data['updatedAt']?.toDate() ?? DateTime.now(),
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'id': id,
      'productId': productId,
      'name': name,
      'attributes': attributes,
      'priceAdjustment': priceAdjustment,
      'stock': stock,
      'images': images,
      'isAvailable': isAvailable,
      'createdAt': createdAt,
      'updatedAt': updatedAt,
    };
  }

  ProductVariant copyWith({
    String? id,
    String? productId,
    String? name,
    Map<String, String>? attributes,
    double? priceAdjustment,
    int? stock,
    List<String>? images,
    bool? isAvailable,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) {
    return ProductVariant(
      id: id ?? this.id,
      productId: productId ?? this.productId,
      name: name ?? this.name,
      attributes: attributes ?? this.attributes,
      priceAdjustment: priceAdjustment ?? this.priceAdjustment,
      stock: stock ?? this.stock,
      images: images ?? this.images,
      isAvailable: isAvailable ?? this.isAvailable,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
    );
  }
}

/// üéõÔ∏è VariantOption - ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ (‡πÄ‡∏ä‡πà‡∏ô ‡∏™‡∏µ‡∏ï‡πà‡∏≤‡∏á‡πÜ, ‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡πà‡∏≤‡∏á‡πÜ)
class VariantOption {
  final String type; // ‡πÄ‡∏ä‡πà‡∏ô 'color', 'size', 'style'
  final String name; // ‡πÄ‡∏ä‡πà‡∏ô '‡∏™‡∏µ', '‡∏Ç‡∏ô‡∏≤‡∏î', '‡πÅ‡∏ö‡∏ö'
  final List<VariantValue> values; // ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ

  VariantOption({
    required this.type,
    required this.name,
    required this.values,
  });

  factory VariantOption.fromMap(Map<String, dynamic> data) {
    return VariantOption(
      type: data['type'] ?? '',
      name: data['name'] ?? '',
      values: (data['values'] as List<dynamic>?)
          ?.map((value) => VariantValue.fromMap(value as Map<String, dynamic>))
          .toList() ?? [],
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'type': type,
      'name': name,
      'values': values.map((value) => value.toMap()).toList(),
    };
  }
}

/// üè∑Ô∏è VariantValue - ‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß
class VariantValue {
  final String value; // ‡πÄ‡∏ä‡πà‡∏ô '‡πÅ‡∏î‡∏á', 'M', '‡πÅ‡∏ö‡∏ö A'
  final String? displayName; // ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• (optional)
  final String? colorCode; // ‡∏£‡∏´‡∏±‡∏™‡∏™‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏µ (hex)
  final String? imageUrl; // ‡∏£‡∏π‡∏õ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å

  VariantValue({
    required this.value,
    this.displayName,
    this.colorCode,
    this.imageUrl,
  });

  String get label => displayName ?? value;

  factory VariantValue.fromMap(Map<String, dynamic> data) {
    return VariantValue(
      value: data['value'] ?? '',
      displayName: data['displayName'],
      colorCode: data['colorCode'],
      imageUrl: data['imageUrl'],
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'value': value,
      'displayName': displayName,
      'colorCode': colorCode,
      'imageUrl': imageUrl,
    };
  }
}

/// üìã ProductWithVariants - ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
class ProductWithVariants {
  final String productId;
  final String name;
  final String description;
  final double basePrice;
  final String category;
  final List<String> images;
  final List<VariantOption> variantOptions; // ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏°‡∏µ
  final List<ProductVariant> variants; // ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  final bool hasVariants; // ‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  final DateTime createdAt;
  final DateTime updatedAt;

  ProductWithVariants({
    required this.productId,
    required this.name,
    required this.description,
    required this.basePrice,
    required this.category,
    this.images = const [],
    this.variantOptions = const [],
    this.variants = const [],
    required this.createdAt,
    required this.updatedAt,
  }) : hasVariants = variantOptions.isNotEmpty;

  // ‡∏´‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≤‡∏° attributes
  ProductVariant? findVariant(Map<String, String> attributes) {
    try {
      return variants.firstWhere(
        (variant) => _attributesMatch(variant.attributes, attributes),
      );
    } catch (e) {
      return null;
    }
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ attributes ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  bool _attributesMatch(Map<String, String> a, Map<String, String> b) {
    if (a.length != b.length) return false;
    
    for (final key in a.keys) {
      if (a[key] != b[key]) return false;
    }
    return true;
  }

  // ‡∏´‡∏≤‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î‡πÅ‡∏•‡∏∞‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
  Map<String, double> get priceRange {
    if (!hasVariants || variants.isEmpty) {
      return {'min': basePrice, 'max': basePrice};
    }

    final prices = variants
        .where((variant) => variant.isAvailable)
        .map((variant) => variant.getFinalPrice(basePrice))
        .toList();

    if (prices.isEmpty) {
      return {'min': basePrice, 'max': basePrice};
    }

    return {
      'min': prices.reduce((a, b) => a < b ? a : b),
      'max': prices.reduce((a, b) => a > b ? a : b),
    };
  }

  // ‡∏´‡∏≤‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏£‡∏ß‡∏°
  int get totalStock {
    if (!hasVariants || variants.isEmpty) return 0;
    return variants.fold(0, (sum, variant) => sum + variant.stock);
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  bool get inStock => totalStock > 0;

  // ‡∏´‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡∏ï‡πá‡∏≠‡∏Å
  List<ProductVariant> get availableVariants {
    return variants.where((variant) => 
        variant.isAvailable && variant.inStock).toList();
  }

  factory ProductWithVariants.fromMap(Map<String, dynamic> data) {
    return ProductWithVariants(
      productId: data['productId'] ?? '',
      name: data['name'] ?? '',
      description: data['description'] ?? '',
      basePrice: (data['basePrice'] ?? 0).toDouble(),
      category: data['category'] ?? '',
      images: List<String>.from(data['images'] ?? []),
      variantOptions: (data['variantOptions'] as List<dynamic>?)
          ?.map((option) => VariantOption.fromMap(option as Map<String, dynamic>))
          .toList() ?? [],
      variants: (data['variants'] as List<dynamic>?)
          ?.map((variant) => ProductVariant.fromMap(variant as Map<String, dynamic>))
          .toList() ?? [],
      createdAt: data['createdAt']?.toDate() ?? DateTime.now(),
      updatedAt: data['updatedAt']?.toDate() ?? DateTime.now(),
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'productId': productId,
      'name': name,
      'description': description,
      'basePrice': basePrice,
      'category': category,
      'images': images,
      'variantOptions': variantOptions.map((option) => option.toMap()).toList(),
      'variants': variants.map((variant) => variant.toMap()).toList(),
      'createdAt': createdAt,
      'updatedAt': updatedAt,
    };
  }
}