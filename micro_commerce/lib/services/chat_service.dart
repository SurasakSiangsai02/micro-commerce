import 'package:cloud_firestore/cloud_firestore.dart';
import '../models/chat_room.dart';
import '../models/chat_message.dart';

/// üí¨ ChatService - ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Chat ‡πÉ‡∏ô Firestore
/// 
/// Collections Structure:
/// ‚Ä¢ chatRooms/                 - ‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏ä‡∏ó‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
/// ‚Ä¢ chatRooms/{roomId}/messages/ - ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡πâ‡∏≠‡∏á
/// 
/// Features:
/// ‚Ä¢ Real-time messaging
/// ‚Ä¢ File/Image sharing
/// ‚Ä¢ Read receipts
/// ‚Ä¢ Room management
class ChatService {
  static final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  /// === COLLECTIONS ===
  static CollectionReference get chatRoomsCollection =>
      _firestore.collection('chatRooms');

  static CollectionReference messagesCollection(String roomId) =>
      chatRoomsCollection.doc(roomId).collection('messages');

  /// === üè† CHAT ROOMS ===

  /// üìã ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏ä‡∏ó‡∏Ç‡∏≠‡∏á user (Real-time)
  static Stream<List<ChatRoom>> getUserChatRooms(String userId) {
    return chatRoomsCollection
        .where('participants', arrayContains: userId)
        .snapshots()
        .map((snapshot) {
          var rooms = snapshot.docs
              .map((doc) => ChatRoom.fromFirestore(doc))
              .where((room) => room.status == 'active') // Filter active rooms
              .toList();
          
          // Sort by lastActivity (most recent first) - client side
          rooms.sort((a, b) {
            if (a.lastActivity == null && b.lastActivity == null) return 0;
            if (a.lastActivity == null) return 1;
            if (b.lastActivity == null) return -1;
            return b.lastActivity!.compareTo(a.lastActivity!);
          });
          
          return rooms;
        });
  }

  /// üìã ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏ä‡∏ó‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Admin/Moderator)
  static Stream<List<ChatRoom>> getAllChatRooms() {
    return chatRoomsCollection
        .snapshots()
        .map((snapshot) {
          var rooms = snapshot.docs
              .map((doc) => ChatRoom.fromFirestore(doc))
              .where((room) => room.status == 'active') // Filter active rooms
              .toList();
          
          // Sort by lastActivity (most recent first) - client side
          rooms.sort((a, b) {
            if (a.lastActivity == null && b.lastActivity == null) return 0;
            if (a.lastActivity == null) return 1;
            if (b.lastActivity == null) return -1;
            return b.lastActivity!.compareTo(a.lastActivity!);
          });
          
          print('üî• ChatService: Loaded ${rooms.length} chat rooms for admin');
          return rooms;
        });
  }

  /// üîç ‡∏´‡∏≤‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏ä‡∏ó‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á customer ‡∏Å‡∏±‡∏ö merchant
  static Future<ChatRoom?> findExistingRoom(String customerId, String merchantId) async {
    try {
      final querySnapshot = await chatRoomsCollection
          .where('participants', arrayContains: customerId)
          .get();

      for (var doc in querySnapshot.docs) {
        final room = ChatRoom.fromFirestore(doc);
        if (room.status == 'active' && room.participants.contains(merchantId)) {
          return room;
        }
      }
      return null;
    } catch (e) {
      throw Exception('Failed to find existing room: $e');
    }
  }

  /// ‚ûï ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏ä‡∏ó‡πÉ‡∏´‡∏°‡πà
  static Future<String> createChatRoom({
    required String customerId,
    required String customerName,
    required String customerEmail,
    String? customerAvatar,
    String merchantId = 'support', // Default support ID
    String? productId,        // ID ‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏ä‡∏ó‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
    String? productName,      // ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏ä‡∏ó‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á  
    String? productImage,     // ‡∏£‡∏π‡∏õ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏ä‡∏ó‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
    double? productPrice,     // ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏ä‡∏ó‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
  }) async {
    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏´‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      final existingRoom = await findExistingRoom(customerId, merchantId);
      if (existingRoom != null) {
        return existingRoom.id;
      }

      final now = DateTime.now();
      final roomData = {
        'participants': [customerId, merchantId],
        'lastMessage': null,
        'lastActivity': now,
        'unreadCount': {
          customerId: 0,
          merchantId: 0,
        },
        'status': 'active',
        'createdAt': now,
        'updatedAt': now,
        'customerName': customerName,
        'customerEmail': customerEmail,
        'customerAvatar': customerAvatar,
        // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        'productId': productId,
        'productName': productName,
        'productImage': productImage,
        'productPrice': productPrice,
        'chatType': productId != null ? 'product_inquiry' : 'general_support',
      };

      final docRef = await chatRoomsCollection.add(roomData);
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö
      final welcomeMessage = productId != null 
        ? '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ä‡∏ó Micro Commerce üéâ\n\n‡πÄ‡∏´‡πá‡∏ô‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏™‡∏ô‡πÉ‡∏à‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ "$productName" ‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö\n‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡πÑ‡∏´‡∏°‡∏Ñ‡∏£‡∏±‡∏ö? üòä'
        : '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ä‡∏ó Micro Commerce üéâ\n‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡πÉ‡∏´‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÑ‡∏´‡∏°‡∏Ñ‡∏£‡∏±‡∏ö?';
        
      await sendSystemMessage(
        roomId: docRef.id,
        content: welcomeMessage,
      );

      return docRef.id;
    } catch (e) {
      throw Exception('Failed to create chat room: $e');
    }
  }

  /// üìä ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏ä‡∏ó
  static Future<void> updateChatRoom(String roomId, Map<String, dynamic> data) async {
    try {
      await chatRoomsCollection.doc(roomId).update({
        ...data,
        'updatedAt': DateTime.now(),
      });
    } catch (e) {
      throw Exception('Failed to update chat room: $e');
    }
  }

  /// üö´ ‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏ä‡∏ó (Admin only)
  static Future<void> blockChatRoom(String roomId) async {
    try {
      await updateChatRoom(roomId, {'status': 'blocked'});
    } catch (e) {
      throw Exception('Failed to block chat room: $e');
    }
  }

  /// ‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏ä‡∏ó
  static Future<void> unblockChatRoom(String roomId) async {
    try {
      await updateChatRoom(roomId, {'status': 'active'});
    } catch (e) {
      throw Exception('Failed to unblock chat room: $e');
    }
  }

  /// === üí¨ MESSAGES ===

  /// üìã ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏ä‡∏ó (Real-time)
  static Stream<List<ChatMessage>> getRoomMessages(String roomId, {int limit = 50}) {
    return messagesCollection(roomId)
        .orderBy('timestamp', descending: true)
        .limit(limit)
        .snapshots()
        .map((snapshot) => snapshot.docs
            .map((doc) => ChatMessage.fromFirestore(doc))
            .toList());
  }

  /// üì® ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
  static Future<String> sendMessage({
    required String roomId,
    required String senderId,
    required String senderName,
    String? senderAvatar,
    required String senderRole,
    required String content,
    String type = 'text',
    String? imageUrl,
    String? fileName,
    int? fileSize,
    String? replyToMessageId,
  }) async {
    try {
      print('üîß ChatService: Preparing to send message to room $roomId');
      
      final now = DateTime.now();
      final messageData = {
        'roomId': roomId,
        'senderId': senderId,
        'senderName': senderName,
        'senderAvatar': senderAvatar,
        'senderRole': senderRole,
        'type': type,
        'content': content,
        'imageUrl': imageUrl,
        'fileName': fileName,
        'fileSize': fileSize,
        'timestamp': now,
        'readBy': [senderId], // ‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏™‡∏°‡∏≠
        'isEdited': false,
        'editedAt': null,
        'replyToMessageId': replyToMessageId,
      };

      print('üìù ChatService: Message data prepared: ${messageData['content']}');
      
      // Debug ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö image messages
      if (type == 'image') {
        print('üñºÔ∏è ChatService: Image message debug');
        print('üñºÔ∏è ImageURL: ${messageData['imageUrl']}');
        print('üñºÔ∏è Content: ${messageData['content']}');
        print('üñºÔ∏è Type: ${messageData['type']}');
      }

      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
      final docRef = await messagesCollection(roomId).add(messageData);
      print('‚úÖ ChatService: Message added to Firestore with ID: ${docRef.id}');

      // ‡πÄ‡∏û‡∏¥‡πà‡∏° sender ‡πÄ‡∏õ‡πá‡∏ô participant ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Admin/Moderator)
      await _ensureParticipant(roomId, senderId, senderRole);

      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏ä‡∏ó
      await _updateRoomAfterMessage(roomId, content, senderId, now);
      print('üîÑ ChatService: Room updated after message');

      return docRef.id;
    } catch (e) {
      print('‚ùå ChatService: Failed to send message: $e');
      throw Exception('Failed to send message: $e');
    }
  }

  /// ü§ñ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏∞‡∏ö‡∏ö
  static Future<String> sendSystemMessage({
    required String roomId,
    required String content,
  }) async {
    return await sendMessage(
      roomId: roomId,
      senderId: 'system',
      senderName: 'System',
      senderRole: 'system',
      content: content,
      type: 'system',
    );
  }

  /// üì∑ ‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
  static Future<String> sendImageMessage({
    required String roomId,
    required String senderId,
    required String senderName,
    String? senderAvatar,
    required String senderRole,
    required String imageUrl,
    String? caption,
  }) async {
    final content = caption?.isNotEmpty == true ? caption! : '';
    
    print('üñºÔ∏è sendImageMessage Debug:');
    print('üñºÔ∏è imageUrl: $imageUrl');  
    print('üñºÔ∏è caption: $caption');
    print('üñºÔ∏è content: $content');
    
    return await sendMessage(
      roomId: roomId,
      senderId: senderId,
      senderName: senderName,
      senderAvatar: senderAvatar,
      senderRole: senderRole,
      content: content,
      type: 'image',
      imageUrl: imageUrl,
    );
  }

  /// üìÅ ‡∏™‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå
  static Future<String> sendFileMessage({
    required String roomId,
    required String senderId,
    required String senderName,
    String? senderAvatar,
    required String senderRole,
    required String fileUrl,
    required String fileName,
    required int fileSize,
  }) async {
    return await sendMessage(
      roomId: roomId,
      senderId: senderId,
      senderName: senderName,
      senderAvatar: senderAvatar,
      senderRole: senderRole,
      content: fileUrl,
      type: 'file',
      fileName: fileName,
      fileSize: fileSize,
    );
  }

  /// ‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
  static Future<void> editMessage(String roomId, String messageId, String newContent) async {
    try {
      await messagesCollection(roomId).doc(messageId).update({
        'content': newContent,
        'isEdited': true,
        'editedAt': DateTime.now(),
      });
    } catch (e) {
      throw Exception('Failed to edit message: $e');
    }
  }

  /// üóëÔ∏è ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
  static Future<void> deleteMessage(String roomId, String messageId) async {
    try {
      await messagesCollection(roomId).doc(messageId).delete();
    } catch (e) {
      throw Exception('Failed to delete message: $e');
    }
  }

  /// üëÅÔ∏è ‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏ß‡πà‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß
  static Future<void> markMessageAsRead(String roomId, String messageId, String userId) async {
    try {
      final messageDoc = await messagesCollection(roomId).doc(messageId).get();
      if (messageDoc.exists) {
        final message = ChatMessage.fromFirestore(messageDoc);
        if (!message.isReadBy(userId)) {
          await messagesCollection(roomId).doc(messageId).update({
            'readBy': FieldValue.arrayUnion([userId]),
          });
        }
      }
    } catch (e) {
      throw Exception('Failed to mark message as read: $e');
    }
  }

  /// üìö ‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß
  static Future<void> markAllMessagesAsRead(String roomId, String userId) async {
    try {
      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏ù‡∏±‡πà‡∏á client
      final allMessages = await messagesCollection(roomId)
          .orderBy('timestamp', descending: true)
          .limit(100) // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
          .get();

      // ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏≠‡πà‡∏≤‡∏ô (client-side filtering)
      final unreadMessages = allMessages.docs.where((doc) {
        final data = doc.data() as Map<String, dynamic>?;
        final readBy = List<String>.from(data?['readBy'] ?? []);
        return !readBy.contains(userId);
      }).toList();

      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ó‡∏µ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
      final batch = _firestore.batch();
      for (var doc in unreadMessages) {
        batch.update(doc.reference, {
          'readBy': FieldValue.arrayUnion([userId]),
        });
      }
      
      if (unreadMessages.isNotEmpty) {
        await batch.commit();
      }

      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï unread count ‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á
      await chatRoomsCollection.doc(roomId).update({
        'unreadCount.$userId': 0,
      });
    } catch (e) {
      throw Exception('Failed to mark all messages as read: $e');
    }
  }

  /// === üìä UTILITIES ===

  /// ÔøΩ ‡πÄ‡∏û‡∏¥‡πà‡∏° participant ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏ä‡∏ó (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Admin/Moderator)
  static Future<void> _ensureParticipant(String roomId, String userId, String userRole) async {
    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Admin/Moderator ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (userRole.toLowerCase().contains('admin') || userRole.toLowerCase().contains('moderator')) {
        final roomDoc = await chatRoomsCollection.doc(roomId).get();
        if (roomDoc.exists) {
          final roomData = roomDoc.data() as Map<String, dynamic>;
          final participants = List<String>.from(roomData['participants'] ?? []);
          
          // ‡πÄ‡∏û‡∏¥‡πà‡∏° Admin/Moderator ‡πÄ‡∏õ‡πá‡∏ô participant ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà
          if (!participants.contains(userId)) {
            participants.add(userId);
            await chatRoomsCollection.doc(roomId).update({
              'participants': participants,
              'unreadCount.$userId': 0, // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ 0 unread
            });
            print('üë• ChatService: Added $userRole $userId as participant to room $roomId');
          }
        }
      }
    } catch (e) {
      print('‚ö†Ô∏è ChatService: Failed to ensure participant: $e');
      // Don't throw error - this is not critical
    }
  }

  /// ÔøΩüîÑ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏ä‡∏ó‡∏´‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
  static Future<void> _updateRoomAfterMessage(
    String roomId,
    String lastMessage,
    String senderId,
    DateTime timestamp,
  ) async {
    try {
      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
      final roomDoc = await chatRoomsCollection.doc(roomId).get();
      if (!roomDoc.exists) return;

      final room = ChatRoom.fromFirestore(roomDoc);
      final newUnreadCount = Map<String, int>.from(room.unreadCount);

      // ‡πÄ‡∏û‡∏¥‡πà‡∏° unread count ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á
      for (String participantId in room.participants) {
        if (participantId != senderId) {
          newUnreadCount[participantId] = (newUnreadCount[participantId] ?? 0) + 1;
        }
      }

      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏´‡πâ‡∏≠‡∏á
      await chatRoomsCollection.doc(roomId).update({
        'lastMessage': lastMessage.length > 100 
            ? '${lastMessage.substring(0, 100)}...' 
            : lastMessage,
        'lastActivity': timestamp,
        'unreadCount': newUnreadCount,
      });
    } catch (e) {
      // Ignore error - ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
      print('Failed to update room after message: $e');
    }
  }

  /// üìà ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏ä‡∏ó (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Admin)
  static Future<Map<String, dynamic>> getChatStatistics() async {
    try {
      final now = DateTime.now();
      final today = DateTime(now.year, now.month, now.day);
      final thisWeek = today.subtract(const Duration(days: 7));

      // ‡∏ô‡∏±‡∏ö‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏ä‡∏ó‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      final totalRooms = await chatRoomsCollection
          .where('status', isEqualTo: 'active')
          .count()
          .get();

      // ‡∏ô‡∏±‡∏ö‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏ä‡∏ó‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
      final todayRooms = await chatRoomsCollection
          .where('createdAt', isGreaterThanOrEqualTo: today)
          .count()
          .get();

      // ‡∏ô‡∏±‡∏ö‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏ä‡∏ó‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ô‡∏µ‡πâ
      final weekRooms = await chatRoomsCollection
          .where('createdAt', isGreaterThanOrEqualTo: thisWeek)
          .count()
          .get();

      return {
        'totalRooms': totalRooms.count,
        'todayRooms': todayRooms.count,
        'weekRooms': weekRooms.count,
        'updatedAt': now,
      };
    } catch (e) {
      throw Exception('Failed to get chat statistics: $e');
    }
  }

  /// üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏ä‡∏ó (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Admin)
  static Future<List<ChatRoom>> searchChatRooms(String query) async {
    try {
      // ‡∏î‡∏∂‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏ù‡∏±‡πà‡∏á client ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á composite index
      final snapshot = await chatRoomsCollection
          .where('status', isEqualTo: 'active')
          .limit(100)
          .get();

      // ‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ù‡∏±‡πà‡∏á client
      final filteredRooms = snapshot.docs
          .map((doc) => ChatRoom.fromFirestore(doc))
          .where((room) => 
            room.customerName.toLowerCase().contains(query.toLowerCase()) ||
            room.customerEmail.toLowerCase().contains(query.toLowerCase()))
          .take(20)
          .toList();

      return filteredRooms;
    } catch (e) {
      throw Exception('Failed to search chat rooms: $e');
    }
  }
}