import 'package:cloud_firestore/cloud_firestore.dart';
import '../models/coupon.dart';

/// üéüÔ∏è CouponService - ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î
/// 
/// ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå:
/// ‚Ä¢ ‡∏™‡∏£‡πâ‡∏≤‡∏á/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç/‡∏•‡∏ö‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á (Admin)
/// ‚Ä¢ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á
/// ‚Ä¢ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î
/// ‚Ä¢ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
/// ‚Ä¢ ‡∏î‡∏π‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
class CouponService {
  static final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  static const String _collection = 'coupons';

  /// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  static Stream<List<Coupon>> getCoupons() {
    return _firestore
        .collection(_collection)
        .orderBy('createdAt', descending: true)
        .snapshots()
        .map((snapshot) => snapshot.docs
            .map((doc) => Coupon.fromFirestore(doc))
            .toList());
  }

  /// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ
  static Stream<List<Coupon>> getActiveCoupons() {
    return _firestore
        .collection(_collection)
        .where('isActive', isEqualTo: true)
        .orderBy('createdAt', descending: true)
        .snapshots()
        .map((snapshot) => snapshot.docs
            .map((doc) => Coupon.fromFirestore(doc))
            .where((coupon) => coupon.canBeUsed(0)) // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏≠‡∏∑‡πà‡∏ô
            .toList());
  }

  /// ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏´‡∏±‡∏™
  static Future<Coupon?> getCouponByCode(String code) async {
    try {
      final querySnapshot = await _firestore
          .collection(_collection)
          .where('code', isEqualTo: code.toUpperCase())
          .limit(1)
          .get();

      if (querySnapshot.docs.isEmpty) {
        return null;
      }

      return Coupon.fromFirestore(querySnapshot.docs.first);
    } catch (e) {
      print('Error getting coupon by code: $e');
      return null;
    }
  }

  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á
  static Future<CouponResult> validateAndApplyCoupon(
    String code, 
    double orderAmount,
  ) async {
    try {
      final coupon = await getCouponByCode(code);
      
      if (coupon == null) {
        return CouponResult.error('Invalid coupon code');
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (!coupon.canBeUsed(orderAmount)) {
        if (!coupon.isActive) {
          return CouponResult.error('This coupon is no longer active');
        } else if (coupon.isExpired) {
          return CouponResult.error('This coupon has expired');
        } else if (coupon.isUsedUp) {
          return CouponResult.error('This coupon has reached its usage limit');
        } else if (orderAmount < coupon.minimumOrderAmount) {
          return CouponResult.error(
            'Minimum order amount is \$${coupon.minimumOrderAmount.toStringAsFixed(2)}'
          );
        } else {
          return CouponResult.error('This coupon cannot be used');
        }
      }

      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î
      final discountAmount = coupon.calculateDiscount(orderAmount);
      
      return CouponResult.success(coupon, discountAmount);
    } catch (e) {
      print('Error validating coupon: $e');
      return CouponResult.error('Failed to validate coupon');
    }
  }

  /// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á
  static Future<bool> incrementCouponUsage(String couponId) async {
    try {
      await _firestore.runTransaction((transaction) async {
        final couponRef = _firestore.collection(_collection).doc(couponId);
        final couponDoc = await transaction.get(couponRef);
        
        if (!couponDoc.exists) {
          throw Exception('Coupon not found');
        }
        
        final coupon = Coupon.fromFirestore(couponDoc);
        final newUsedCount = coupon.usedCount + 1;
        
        transaction.update(couponRef, {
          'usedCount': newUsedCount,
          'updatedAt': Timestamp.now(),
        });
      });
      
      return true;
    } catch (e) {
      print('Error incrementing coupon usage: $e');
      return false;
    }
  }

  /// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
  static Future<String?> createCoupon(Coupon coupon) async {
    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      final existingCoupon = await getCouponByCode(coupon.code);
      if (existingCoupon != null) {
        throw Exception('Coupon code already exists');
      }

      final docRef = await _firestore.collection(_collection).add(coupon.toFirestore());
      
      print('‚úÖ Created coupon: ${coupon.code} with ID: ${docRef.id}');
      return docRef.id;
    } catch (e) {
      print('‚ùå Error creating coupon: $e');
      return null;
    }
  }

  /// ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á
  static Future<bool> updateCoupon(String couponId, Coupon updatedCoupon) async {
    try {
      await _firestore
          .collection(_collection)
          .doc(couponId)
          .update(updatedCoupon.copyWith(
            id: couponId,
            updatedAt: DateTime.now(),
          ).toFirestore());
      
      print('‚úÖ Updated coupon: $couponId');
      return true;
    } catch (e) {
      print('‚ùå Error updating coupon: $e');
      return false;
    }
  }

  /// ‡∏•‡∏ö‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á
  static Future<bool> deleteCoupon(String couponId) async {
    try {
      await _firestore.collection(_collection).doc(couponId).delete();
      
      print('‚úÖ Deleted coupon: $couponId');
      return true;
    } catch (e) {
      print('‚ùå Error deleting coupon: $e');
      return false;
    }
  }

  /// ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á
  static Future<bool> toggleCouponStatus(String couponId, bool isActive) async {
    try {
      await _firestore.collection(_collection).doc(couponId).update({
        'isActive': isActive,
        'updatedAt': Timestamp.now(),
      });
      
      print('‚úÖ ${isActive ? 'Activated' : 'Deactivated'} coupon: $couponId');
      return true;
    } catch (e) {
      print('‚ùå Error toggling coupon status: $e');
      return false;
    }
  }

  /// ‡∏î‡∏π‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á
  static Future<CouponStats> getCouponStats() async {
    try {
      final snapshot = await _firestore.collection(_collection).get();
      final coupons = snapshot.docs.map((doc) => Coupon.fromFirestore(doc)).toList();
      
      int totalCoupons = coupons.length;
      int activeCoupons = coupons.where((c) => c.status == CouponStatus.active).length;
      int expiredCoupons = coupons.where((c) => c.status == CouponStatus.expired).length;
      int usedUpCoupons = coupons.where((c) => c.status == CouponStatus.usedUp).length;
      int totalUsage = coupons.fold(0, (sum, c) => sum + c.usedCount);
      
      return CouponStats(
        totalCoupons: totalCoupons,
        activeCoupons: activeCoupons,
        expiredCoupons: expiredCoupons,
        usedUpCoupons: usedUpCoupons,
        totalUsage: totalUsage,
      );
    } catch (e) {
      print('‚ùå Error getting coupon stats: $e');
      return CouponStats(
        totalCoupons: 0,
        activeCoupons: 0,
        expiredCoupons: 0,
        usedUpCoupons: 0,
        totalUsage: 0,
      );
    }
  }

  /// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°
  static String generateCouponCode({int length = 8}) {
    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
    final random = DateTime.now().millisecondsSinceEpoch;
    String result = '';
    
    for (int i = 0; i < length; i++) {
      result += chars[(random + i) % chars.length];
    }
    
    return result;
  }

  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  static bool isValidCouponCode(String code) {
    if (code.trim().isEmpty) return false;
    if (code.length < 3 || code.length > 20) return false;
    
    // ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
    final regex = RegExp(r'^[A-Z0-9]+$');
    return regex.hasMatch(code.toUpperCase());
  }
}

/// ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á
class CouponStats {
  final int totalCoupons;
  final int activeCoupons;
  final int expiredCoupons;
  final int usedUpCoupons;
  final int totalUsage;

  const CouponStats({
    required this.totalCoupons,
    required this.activeCoupons,
    required this.expiredCoupons,
    required this.usedUpCoupons,
    required this.totalUsage,
  });

  int get inactiveCoupons => totalCoupons - activeCoupons - expiredCoupons - usedUpCoupons;
  
  double get activePercentage => totalCoupons > 0 ? (activeCoupons / totalCoupons) * 100 : 0;
  double get usageRate => totalCoupons > 0 ? (totalUsage / totalCoupons) : 0;
}